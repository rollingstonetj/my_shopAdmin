C51 COMPILER V9.01   BUTTON                                                                05/07/2018 20:54:21 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE BUTTON
OBJECT MODULE PLACED IN .\button.obj
COMPILER INVOKED BY: E:\BaiduNetdiskDownload\keil\C51\BIN\C51.EXE C:\Users\94963\Desktop\ProgrammableLED-master\software
                    -\src\button.c BROWSE DEBUG OBJECTEXTEND PRINT(.\button.lst) OBJECT(.\button.obj)

line level    source

   1          #include "stm32f10x.h"
*** WARNING C318 IN LINE 1 OF C:\Users\94963\Desktop\ProgrammableLED-master\software\src\button.c: can't open file 'stm3
             -2f10x.h'
   2          #include "utils.h"
*** ERROR C129 IN LINE 18 OF C:\USERS\94963\DESKTOP\PROGRAMMABLELED-MASTER\SOFTWARE\SRC\UTILS.H: missing ';' before 'g_j
             -iffies'
   3          #include "button.h"
   4          #include "display_state.h"
   5          #include "power.h"
   6          #include "led.h"
   7          
   8          #define BTN_BUTTON_PIN         GPIO_Pin_2
   9          #define BTN_BUTTON_PORT        GPIOB 
  10          #define BTN_BUTTON_RCC         RCC_APB2Periph_GPIOB
  11          #define BTN_BUTTON_PORTSOURCE  GPIO_PortSourceGPIOB
  12          #define BTN_BUTTON_PINSOURCE   GPIO_PinSource2
  13          #define BTN_BUTTON_IRQ             EXTI2_IRQn
  14          #define BTN_BUTTON_IRQROUTINE  EXTI2_IRQHandler
  15          #define BTN_BUTTON_EXTILINE    EXTI_Line2
  16          
  17          #define BTN_ANTISHAKE_TIMER      TIM2
  18          #define BTN_ANTISHAKE_RCC        RCC_APB1Periph_TIM2
  19          #define BTN_ANTISHAKE_IRQ        TIM2_IRQn
  20          #define BTN_ANTISHAKE_IRQROUTINE TIM2_IRQHandler
  21          
  22          // unit ms
  23          #define BTN_ANTISHAEK_TIME       50
  24          
  25          static void _initAntiShakeTimer(void)
  26          {
  27                  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
  28                  NVIC_InitTypeDef         NVIC_InitStructure;
  29          
  30                  RCC_APB1PeriphClockCmd(BTN_ANTISHAKE_RCC, ENABLE);
  31          
  32                  NVIC_InitStructure.NVIC_IRQChannel = BTN_ANTISHAKE_IRQ;
  33                  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  34                  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  35                  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  36                  NVIC_Init(&NVIC_InitStructure);
  37          
  38                  TIM_DeInit(BTN_ANTISHAKE_TIMER);        
  39                  TIM_TimeBaseStructure.TIM_Period = BTN_ANTISHAEK_TIME;  
  40                  TIM_TimeBaseStructure.TIM_Prescaler = 8000;
  41                  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; 
  42                  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
  43                  TIM_TimeBaseInit(BTN_ANTISHAKE_TIMER, &TIM_TimeBaseStructure);
  44                  TIM_ARRPreloadConfig(BTN_ANTISHAKE_TIMER, DISABLE);
  45                  TIM_SetCounter(BTN_ANTISHAKE_TIMER, BTN_ANTISHAEK_TIME);
  46                  TIM_Cmd(BTN_ANTISHAKE_TIMER, DISABLE);
  47          
  48                  TIM_ClearITPendingBit(BTN_ANTISHAKE_TIMER, TIM_IT_Update);
  49                  TIM_ITConfig(BTN_ANTISHAKE_TIMER, TIM_IT_Update, ENABLE);
  50                  
C51 COMPILER V9.01   BUTTON                                                                05/07/2018 20:54:21 PAGE 2   

  51                  return;
  52          }         
  53          
  54          static void _deinitAntiShakeTimer(void)
  55          {
  56                  NVIC_InitTypeDef         NVIC_InitStructure;
  57          
  58                  NVIC_InitStructure.NVIC_IRQChannel = BTN_ANTISHAKE_IRQ;
  59                  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  60                  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  61                  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
  62                  NVIC_Init(&NVIC_InitStructure);
  63          
  64                  TIM_Cmd(BTN_ANTISHAKE_TIMER, DISABLE);
  65                  TIM_ITConfig(BTN_ANTISHAKE_TIMER, TIM_IT_Update, DISABLE);
  66          
  67                  RCC_APB1PeriphClockCmd(BTN_ANTISHAKE_RCC, DISABLE);
  68                  
  69                  return;
  70          }         
  71          
  72          static void _initButton(void)
  73          {
  74                  GPIO_InitTypeDef GPIO_InitStructure;
  75                  EXTI_InitTypeDef EXTI_InitStructure;
  76                  NVIC_InitTypeDef NVIC_InitStructure;
  77          
  78                  RCC_APB2PeriphClockCmd(BTN_BUTTON_RCC, ENABLE);
  79          
  80                  GPIO_InitStructure.GPIO_Pin = BTN_BUTTON_PIN;
  81                  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  82                  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
  83                  GPIO_Init(BTN_BUTTON_PORT, &GPIO_InitStructure);        
  84                  GPIO_EXTILineConfig(BTN_BUTTON_PORTSOURCE, BTN_BUTTON_PINSOURCE); 
  85          
  86              NVIC_InitStructure.NVIC_IRQChannel = BTN_BUTTON_IRQ;
  87                  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  88              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  89              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  90              NVIC_Init(&NVIC_InitStructure);
  91          
  92                  EXTI_InitStructure.EXTI_Line = BTN_BUTTON_EXTILINE;
  93                  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  94                  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising; 
  95                  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
  96                  EXTI_Init(&EXTI_InitStructure);
  97          
  98                  return;
  99          }
 100          
 101          static void _deinitButton(void)
 102          {
 103                  EXTI_InitTypeDef EXTI_InitStructure;
 104                  NVIC_InitTypeDef NVIC_InitStructure;
 105          
 106              NVIC_InitStructure.NVIC_IRQChannel = BTN_BUTTON_IRQ;
 107                  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 108              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 109              NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 110              NVIC_Init(&NVIC_InitStructure);
 111          
 112                  EXTI_InitStructure.EXTI_Line = BTN_BUTTON_EXTILINE;
C51 COMPILER V9.01   BUTTON                                                                05/07/2018 20:54:21 PAGE 3   

 113                  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 114                  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising; 
 115                  EXTI_InitStructure.EXTI_LineCmd = DISABLE;
 116                  EXTI_Init(&EXTI_InitStructure);
 117          
 118                  return;
 119          }
 120          
 121          void BTN_Init(void)
 122          {
 123                  _initButton();
 124                  _initAntiShakeTimer();
 125                  return;
 126          }
 127          
 128          void BTN_Deinit(void)
 129          {
 130              _deinitAntiShakeTimer();
 131              _deinitButton();
 132              return;
 133          }
 134          
 135          void BTN_BUTTON_IRQROUTINE(void)
 136          {
 137                  if (SET == EXTI_GetITStatus(BTN_BUTTON_EXTILINE)){
 138                          EXTI_ClearITPendingBit(BTN_BUTTON_EXTILINE);    
 139                          //start timer   
 140                          TIM_SetCounter(BTN_ANTISHAKE_TIMER, BTN_ANTISHAEK_TIME);
 141                          TIM_Cmd(BTN_ANTISHAKE_TIMER, ENABLE);      
 142                  }       
 143          }
 144          
 145          void BTN_ANTISHAKE_IRQROUTINE(void)
 146          {
 147                  if(TIM_GetITStatus(BTN_ANTISHAKE_TIMER, TIM_IT_Update) != RESET){
 148                          TIM_ClearITPendingBit(BTN_ANTISHAKE_TIMER, TIM_IT_Update);
 149          
 150                          TIM_Cmd(BTN_ANTISHAKE_TIMER, DISABLE);
 151          
 152                          //check if the button is still been pushed
 153                          if (Bit_SET == GPIO_ReadInputDataBit(BTN_BUTTON_PORT, BTN_BUTTON_PIN))
 154                          {
 155                      PWR_Restore();
 156                                  STATE_NextState();
 157                          }
 158                  }//if   
 159          }
 160          

C51 COMPILATION COMPLETE.  1 WARNING(S),  1 ERROR(S)
